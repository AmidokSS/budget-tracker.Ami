import { create } from 'zustand'
import { persist } from 'zustand/middleware'
import type { Currency, ExchangeRates, CurrencyInfo } from '@/types'

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç–∞—Ö
export const CURRENCIES: Record<Currency, CurrencyInfo> = {
  PLN: {
    code: 'PLN',
    name: 'Polish Z≈Çoty',
    symbol: 'z≈Ç',
    flag: 'üáµüá±'
  },
  USD: {
    code: 'USD',
    name: 'US Dollar',
    symbol: '$',
    flag: 'üá∫üá∏'
  },
  EUR: {
    code: 'EUR',
    name: 'Euro',
    symbol: '‚Ç¨',
    flag: 'üá™üá∫'
  },
  UAH: {
    code: 'UAH',
    name: 'Ukrainian Hryvnia',
    symbol: '‚Ç¥',
    flag: 'üá∫üá¶'
  }
}

interface CurrencyState {
  // –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞
  selectedCurrency: Currency
  
  // –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ PLN
  exchangeRates: ExchangeRates
  
  // –ö–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –∫—É—Ä—Å—ã
  lastUpdated: string | null
  
  // –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ª–∏ –∫—É—Ä—Å—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
  isLoading: boolean
  
  // –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤
  error: string | null
  
  // Actions
  // eslint-disable-next-line no-unused-vars
  setSelectedCurrency: (currency: Currency) => void
  // eslint-disable-next-line no-unused-vars
  setExchangeRates: (rates: ExchangeRates, lastUpdated: string) => void
  // eslint-disable-next-line no-unused-vars
  setLoading: (loading: boolean) => void
  // eslint-disable-next-line no-unused-vars
  setError: (error: string | null) => void
  
  // –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ PLN –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É
  // eslint-disable-next-line no-unused-vars
  convertFromPLN: (amount: number) => number
  
  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
  // eslint-disable-next-line no-unused-vars
  formatAmount: (amount: number, showSymbol?: boolean) => string
  
  // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
  getCurrentRate: () => number
  
  // –ù—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã (–ø—Ä–æ—à–ª–∏ —Å—É—Ç–∫–∏)
  shouldUpdateRates: () => boolean
}

export const useCurrencyStore = create<CurrencyState>()(
  persist(
    (set, get) => ({
      selectedCurrency: 'PLN',
      exchangeRates: {
        USD: 1,
        EUR: 1,
        UAH: 1
      },
      lastUpdated: null,
      isLoading: false,
      error: null,
      
      setSelectedCurrency: (currency) => {
        set({ selectedCurrency: currency })
      },
      
      setExchangeRates: (rates, lastUpdated) => {
        set({ 
          exchangeRates: rates, 
          lastUpdated,
          error: null 
        })
      },
      
      setLoading: (loading) => {
        set({ isLoading: loading })
      },
      
      setError: (error) => {
        set({ error, isLoading: false })
      },
      
      convertFromPLN: (amount) => {
        const state = get()
        if (state.selectedCurrency === 'PLN') {
          return amount
        }
        
        const rate = state.exchangeRates[state.selectedCurrency]
        return amount * rate
      },
      
      formatAmount: (amount, showSymbol = true) => {
        const state = get()
        const currency = CURRENCIES[state.selectedCurrency]
        const convertedAmount = state.convertFromPLN(amount)
        
        const formatted = new Intl.NumberFormat('pl-PL', {
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        }).format(convertedAmount)
        
        if (!showSymbol) return formatted
        
        // –î–ª—è PLN –∏ UAH —Å–∏–º–≤–æ–ª –∏–¥–µ—Ç –ø–æ—Å–ª–µ —á–∏—Å–ª–∞
        if (state.selectedCurrency === 'PLN' || state.selectedCurrency === 'UAH') {
          return `${formatted} ${currency.symbol}`
        }
        
        // –î–ª—è USD –∏ EUR —Å–∏–º–≤–æ–ª –∏–¥–µ—Ç –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º
        return `${currency.symbol}${formatted}`
      },
      
      getCurrentRate: () => {
        const state = get()
        if (state.selectedCurrency === 'PLN') return 1
        return state.exchangeRates[state.selectedCurrency]
      },
      
      shouldUpdateRates: () => {
        const state = get()
        if (!state.lastUpdated) return true
        
        const lastUpdate = new Date(state.lastUpdated)
        const now = new Date()
        const hoursDiff = (now.getTime() - lastUpdate.getTime()) / (1000 * 60 * 60)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
        return hoursDiff >= 24
      }
    }),
    {
      name: 'currency-store',
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ isLoading –∏ error
      partialize: (state) => ({
        selectedCurrency: state.selectedCurrency,
        exchangeRates: state.exchangeRates,
        lastUpdated: state.lastUpdated
      })
    }
  )
)